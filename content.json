{"pages":[{"title":"关于我","text":"我是谁? Σ(っ °Д °;)っ我在哪？Σ(ﾟДﾟ；≡；ﾟдﾟ)我在做什么？┬─┬ ノ( ‘ - ‘ノ) ( ╯ ‵ □ ′ )╯︵┻━┻","link":"/about/index.html"}],"posts":[{"title":"文章收藏","text":"在这里收藏着一些我觉得值得收藏的文章。 1、这家医院的医生没退路，他们治不好，全国都没辙，病人真得死 对重症病人来说，死都不是最可怕的，更怕的是不知道自己得了什么病。","link":"/2019/06/18/articles-collection/"},{"title":"高质量图片网站推荐","text":"我们在网站开发中，常常需要去网上找一些图片素材，而好的图片并不是很好找，大部分都会有水印而且都是收费的，所以我将我所收集来的免费的高质量的图片网站分享给大家。 Pexels Pexels帮助设计师，博主和正在寻找图像的每个人找到可以在任何地方免费使用的精美照片。提供由 Pexels 许可证授权的高品质且完全免费的图库相片。 Plixs 上的所有图像，矢量，音频和视频文件均根据创作共享公共领域许可证CC0 1.0获得许可。 Pixabay 是如此充满活力的创意社区，分享版权免费图片和视频。所有内容都根据Simplified Pixabay License许可证发布，这使得它们可以安全使用而无需征得许可或给予艺术家信用 - 即使是出于商业目的。 Picjumbo 所有照片都可以免费使用，但请记住，虽然这里列出的照片可以免费下载和使用，但有些照片没有型号或属性发布。部分照片还可能包含受版权保护的品牌，徽标，物体或个人财产。 Pixeden 的设计理念是为现代设计师在日常工作中可能需要的所有工具创建一站式服务。我们孜孜不倦地为您提供最好的最佳服务，包括我们的高级和免费图形，网页和设计资源。 Unsplash 世界上最慷慨的摄影师社区为您带来超过850,000张免费高分辨率照片。在Unsplash上​​发布的所有照片都可以免费使用。您可以将它们用于商业和非商业目的。您不需要向摄影师或Unsplash征求许可或提供信用，尽管我们会尽可能地感激。Unsplash License Barnimages Free high-resolution images for everyone.Barnimages License Gratisography Quirky, Creative, Always Free Photos.Gratisography License Chamberofcommerce Stock photo search made easy. Stocksnap Beautiful free stock photos. Streetwill Stokpic Free Stock Photos For Commercial Use. Thenounproject Icons for everything. Manypixels 每周都会发现免版税的插图，为您的项目提供动力。以商业或非商业方式将它们用于您的目标网页，博客文章，电子邮件简报，社交媒体图形等等！我们的许可。","link":"/2019/05/08/free-photo-website-recommended/"},{"title":"左撇子人生（一）","text":"回顾一下我的人生，并没有什么特别值得回味的事情。 今天是2019年5月6日，立夏，晴天但感觉不到什么温暖，尽管有太阳，冷风却依旧往衣领里灌。一整天我都坐在办公室里戴着耳机听着一些小众音乐冷漠的敲着毫无意义的代码，同事们也都在认真工作或讨论着一些业务方面的事情，因为我在一家医院外包公司工作，所以在这间 信息外包办公室 里还有其他公司的外包人员，人多嘴杂避免不了有些吵闹，唯一清净的时候就只有早晨和中午了。 从年初上班开始，基本上就是在维护去年开发的项目。出现一些新需求或者需要修复的BUG就会忙一下，弄完就基本就没什么事了。差不多是忙一下闲一下的状态，我会在没有需求的时候做自己的项目用来提升自己的技能。 这张开发路线图是我目前正在学习的路线图，尽量让自己不走弯路的学习提升技能。从2015年底开始工作到现在已经好多年了，但刚毕业的时候我想走的技术路线是Java，但无奈第一家公司只有算老板只有二十个人还赶上他们正在做项目，而我是个新人领导并没有让我也接手项目，所以自己前期只是在“混日子”。学校里面教的 Java/C#/JavaScript/CSS/HTML/Oracle/SQLServer 这些技能我都会，同学都说我是班级的学霸。但我自己却觉得我技术一般，现在想来也还是很一般。后来领导问我会不会.NET，然后我就被调到 .NET组 开发内部即时通讯系统，当时的技术还是 WCF + WPF，这大概是我跟.NET的缘分了。 后来我也因为一些原因离职了，2016年来到上海工作，这家公司一共只有不到十个人，而我是整个公司的第一个技术人员，他们此前的项目是从合作公司买来的，我来了之后就直接上手做项目，所以我的职业生涯从一开始就没有人带过我，这也造就了我在第二家公司的败笔。当时的项目是很古老的ASP.NET 拖拽控件的形式开发Web项目，学校里仅教过ASP.NET MVC，我就只好自学,每天在挨骂中度日，后来，我通过自学的Java SSM框架(即：Spring|SpringMVC|MyBatis，当时最流行的框架，那时候还没有SpringBoot等框架的出现)，做了好多项目(当然只有我自己一个人，所以并不知道自己的水平，只是觉得自己很垃圾)，在年底的时候又过来了一套框架，依旧是ASP.NET但不同的是，前端框架是Bootstrap，采用 Ajax + ashx 的方式进行请求数据。然后开始了每天都是很无聊的增删改查，自己曾因为赶这个项目，几个月无休息的从早晨六点钟干到凌晨两三点钟下班，自己的生日和圣诞节都是在加班中度过。 不知道什么时候开始我的编程生涯开窍了，觉得好多技术即使自己没见过没用过看看项目源码就懂得怎么写了，第二年开始招人，实施、.NET开发工程师、前台。其中.NET人员由我来面试我来带团队，我没过带过人的经验，而招的人都是实习生，领导说想培养一些可以走到公司最后的人，实际上只是想省一些钱，我带领团队之后我的败笔就来了，我变得越来越疲惫，他们不会还不学习，领导规定他们要做完的日期到了，他们做不完还得我给他们做，到头来整个项目还是我一个人做的，而他们的工资几乎都是我给他们拿的，就这样带了一年，他们依旧不会熟练地掌握这套框架，最终年底的时候带的新人走了一个不剩的，原因就是领导经常骂他们，第三年我也准备离职了，让他们招三年工作经验以上的人，每次谈这件事他们都回避不想谈(毕竟像我这样勤劳不辞辛苦还价格公道的人不好找)总是画大饼和劝我走了就找不到好的公司了，说我技术太垃圾了再多“呆”几年再走就好找工作了，而我已经下定决定了决心~找到一家以技术为核心的公司。毕竟自己的知识储备还很欠缺，前方的道路也依旧很遥远。 其实有一件事情我并不想谈，就是职场和生活。我一直都在小公司工作，而小公司的工作氛围不压抑很适合我，但这第二家公司我还是职场新人自以为和领导同事老板的关系都算是蛮好的，而他们也都很关心我的样子。但我离职的时候，我突然把所有的事情都相通了，通过打听后发现我带的人和我工资是一样的，而我这几年都没有涨过工资，勉强刚过上海薪资最低标准，而五险一金社保什么的骗我说帮我办了意思是还要我感激他们，但我走了才知道什么都没有办就连劳动合同都是快走的时候签的。所以的关心都是虚假的，所有的好话都是骗人的，领导当着我的面骂其他的新人，我就知道，我走了之后他们依旧会把骂其他人的话附加到我的身上说给其他人听。所以不必委屈自己，做好自己问心无愧。 达克效应（英语：D-K effect），全称为邓宁-克鲁格效应（英语：Dunning–Kruger effect），是一种认知偏差，能力欠缺的人有一种虚幻的自我优越感，错误地认为自己比真实情况更加优秀。简言之即：庸人容易因欠缺自知之明而自我膨胀。Kruger和Dunning将其归咎于元认知上的缺陷，能力欠缺的人无法认识到自身的无能，不能准确评估自身的能力。他们的研究还表明，反之，非常能干的人会低估自己的能力，错误地假定他们自己能够很容易完成的任务，别人也能够很容易地完成。 我曾一度非常自卑，我从学习到工作到现在，总是听到别人说我很厉害，但我并不知道自己厉害在哪里，一直觉得他们是外行都是在高估我，只有自己才知道自己的水平是什么样的。学的越多越觉得自己学的太少了，在第二家工作的几年时间里我的工资低没有攒下钱，没有攒下技术只是增删改查更加熟练。而公司又总是打击我，让我觉得自己太太太太太太垃圾。而自己懦弱内向的性格，无处发泄，造成了无意识的暴脾气很讨厌自己，跟家里人平时打电话聊天的时候，也会对他们发泄。我就是那种窝里横的人，对别人毕恭毕敬的，把所有的不满发泄给最亲近的人。 随着时间增长，我看开了许多事情，我依旧独来独往，但我并不孤独。我并不会看其他人对我什么看法什么评价那是他们的事与我无关，我只想做好自己。 希望自己现在的努力换来的是不让未来的我，讨厌现在的自己。","link":"/2019/05/06/left-hander-1/"},{"title":"Node.js 学习笔记","text":"一、什么是 Node.js？官方说法: Node.js®是基于Chrome的V8 JavaScript引擎构建的JavaScript运行时。 Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. 可以理解为，Node.js 是使用JavaScript语言进行开发的一种小型服务器，拥有Java、.NET、PHP 等处理后端的能力。 1.1 下载与安装Node.js官网 我们先去官网下载安装包，我们可以看到 在Windows系统下会显示两个版本，LTS(Long Time Support) 是长期支持版的意思，是 Node.js 版本相对稳定的版本。而 Current 是当前最新版本，里面包含一些最新特性，如果不追求稳定可以在此版本下进行开发（建议不要用于生产环境）。 安装完成以后，运行 node --version 或 node -v， 查看是否安装成功。 123$ node --version# 或者$ node -v 1.2 基本语法我们可以使用以下命令，来执行脚本文件。 1$ node app.js 二、Node.js 入门2.1 Hello World我们首先看一个简单的例子，仅需几行代码就可以开启服务器接收页面请求和响应。 123456789var http = require('http');var server = http.createServer();server.on('request', function (request, response) { response.end('Hello World!');});server.listen(3000); 上面代码中，我们引入了 http 核心模块，并创建服务器接收请求，开启服务器并监听端口号。页面的显示效果如下。 2.1.1 内置http核心模块我们可以使用 require('http') 来引入http核心模块，进行创建Web服务器，接收客户端发来的请求和响应数据等操作。 1234567891011121314151617181920212223242526// 1. 使用 require 加载 http 核心模块var http = require('http');// 2. 创建 Web服务器var server = http.createServer();// 3. 监听 request 请求事件server.on('request', function (request, response) { console.log('收到客户端发送的请求！'); // 使用 设置响应头 解决返回数据中文问题 response.setHeader('Content-Type', 'text/plain; charset=utf-8'); // response 响应客户端发送的请求 response.write('Hello World!'); // 结束响应 response.end();});// 4. 监听端口，启动服务server.listen(3000, function () { console.log('服务器启动成功！');}); 2.1.2 内置fs核心模块我们可以使用 require('fs') 来引入fs核心模块，进行文件的读写等操作。 1234567891011121314// 1. 使用 require 加载 fs 核心模块var fs = require('fs');// 2. 读取文件fd.readFile('./文件路径', function (err,data){ // 如果err不为空，则说明文件上传失败！ if(err){ console.log('文件读取失败！' + err.message); return; } console.log(data);});","link":"/2019/05/22/nodejs-note/"},{"title":".NET 5","text":"最近看到了微软官方的 .NET Blog 中写的一篇.NET 5， 讲述的是 .NET Core 3.0 之后的下一个版本 .NET 5，不禁让我感到技术发展的迅猛。 微软官方说以后的每年的十一月份进行版本升级，此后将 .NET Framework 和 .NET Core 进行合并，所以再次升级就会是 .NET 5、.NET 6、.NET 7、.NET 8 从最初在学校中学习的 WinForm 和 ASP.NET MVC4 开始，工作后又使用的WebForm，ASP.NET MVC 5 再到现在自学的 .NET Core,微软终于要把 .NET Framework 和 .NET Core 整合到一块了。 今年会在9月份会发布 .NET Core 3.0 并且会和 C# 8.0 进行同时发布 C# 8.0 官方原文 微软的 Blazor 允许使用C#而不是JavaScript构建交互式Web UI，客户端和服务器代码都是用C#编写。可以使用WebAssembly直接在浏览器中运行客户端C#代码，因为它是在WebAssembly上运行的真实.NET。Blazor可以在服务器上运行客户端逻辑。Blazor使用开放的Web标准，没有插件或代码转换，Blazor适用于所有现代Web浏览器，包括移动浏览器。Blazor 官方原文","link":"/2019/05/07/dotnet-net5/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/04/30/hello-world/"},{"title":"语录（一）","text":"弗里德里希·威廉·尼采（Friedrich Wilhelm Nietzsche）12345678910111213141516171819202122232425262728291、当你经历七重的孤独，才能成功真正的强者。2、当我到达高处，便发觉自己总是孤独的，无人同我说话，孤寂的严冬令我发抖，我在高处究竟意欲何为。3、也许你感觉自己的努力总是徒劳无功，但不必怀疑，你每天都离顶点更进一步。今天的你离顶点还遥遥无期。但你通过今天的努力，积蓄了明天勇攀高峰的力量。4、如果你无法潜到水底，就不要说水是深不可测的。5、但凡不能杀死你的，最终都会使你更强大。弗里德里希·威廉·尼采（Friedrich Wilhelm Nietzsche）6、当你凝视深渊时，深渊也在凝视着你。7、我们飞得越高，我们在那些不能飞的人眼中的形象 就越渺小。8、要么庸俗，要么孤独。9、你今天是一个孤独的怪人，你离群索居，总有一天你会成为一个民族!10、假使有神，我怎能忍受我不是那神，所以没有神!11、世界弥漫着焦躁不安的气息，因为每一个人都急于从自己的枷锁中解放出来。12、聪明的人只要能掌握自己，便什么也不会失去。13、当心!他一沉思，就立即准备好了一个谎言。14、一个人知道自己为什么而活，就能偶够忍受任何生活。15、不能听命于自己者，就要受命于他人。 鲁迅11、猛兽总是独行，牛羊才成群结队。","link":"/2019/08/10/quotations-1/"},{"title":"React.js 学习笔记","text":"一、什么是 React？React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。 React 拥有 声明式、组件化，一次学习随处编写等特点。 请确保您安装了较新版本的 Node.js。 我们可以使用官方提供的 creact-react-app 脚手架工具来创建一个 react 应用 12345# 安装 creact-react-app 脚手架工具npm install creact-react-app# 使用脚手架工具创建应用create-react-app my-app 我们可以进入使用以下命令来运行我们的项目 12345# 进入 my-app 文件夹cd my-app# 运行项目npm start 我们可以使用一下命令来编译我们的项目 1npm run build","link":"/2019/06/13/reactjs-note/"}],"tags":[{"name":"文章收藏","slug":"文章收藏","link":"/tags/文章收藏/"},{"name":"网站推荐","slug":"网站推荐","link":"/tags/网站推荐/"},{"name":"左撇子人生","slug":"左撇子人生","link":"/tags/左撇子人生/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":".NET","slug":"NET","link":"/tags/NET/"},{"name":"语录收藏","slug":"语录收藏","link":"/tags/语录收藏/"},{"name":"React.js","slug":"React-js","link":"/tags/React-js/"}],"categories":[{"name":"收藏","slug":"收藏","link":"/categories/收藏/"},{"name":"推荐","slug":"推荐","link":"/categories/推荐/"},{"name":"人生回顾","slug":"人生回顾","link":"/categories/人生回顾/"},{"name":"前端","slug":"前端","link":"/categories/前端/"},{"name":"技术分享","slug":"技术分享","link":"/categories/技术分享/"}]}